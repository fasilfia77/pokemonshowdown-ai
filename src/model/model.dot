digraph model {
    label = "Model\n Example with dueling + distributional architecture (atoms = 51)\nTotal parameters = 2,610,841"
    node [shape=rect]
    rankdir = LR
    splines = polyline
    ranksep = .1
    nodesep = .1
    ratio = .4

    subgraph cluster_pma {
        label = "Pooling via Multi-head Attention (permutation invariant)\nPMA(h,hu,u)"

        pma_seed [label="Seed\n(1xU)"]
        pma_features [style=filled label="Features\n(NxU)"]
        pma_mask [style=filled label="Mask (optional)\n(NxU)"]
        pma_attention [label="Multi-Head Attention + Leaky ReLU\n(1xU)"]
        pma_reshape [label="Reshape (optional)\n(U)"]
        pma_out [style=filled label="Output\n(U)"]

        pma_features:e -> pma_attention:w [label="K/V"]
        pma_seed:e -> pma_attention:w [label="Q"]
        pma_mask:e -> pma_attention:w [label="\n(mask)"]
        pma_attention:e -> pma_reshape:w
        pma_reshape:e -> pma_out:w
    }

    subgraph cluster_sab {
        label = "Self Attention Block for set input (permutation equivariant)\nSAB(h,hu,u)"

        sab_features [style=filled label="Features\n(NxU)"]
        sab_mask [style=filled label="Mask (optional)\n(N)"]
        sab_attention [label="Multi-Head Attention + Leaky ReLU\n(NxU)"]
        sab_residual_1 [label="Add\n(NxU)"]
        sab_attention_dense [label="Dense(U) + Leaky ReLU\n(NxU)"]
        sab_residual_2 [label="Add\n(NxU)"]
        sab_attention_mask [label="Mask\n(NxU)"]
        sab_out [style=filled label="Output\n(NxU)"]

        sab_features:e -> sab_attention:w [label="Q/K/V"]
        sab_mask:e -> sab_attention:w [label="\n\n(mask)"]
        sab_attention:e -> sab_residual_1:w
        sab_residual_1:e -> sab_attention_dense:w
        sab_attention_dense:e -> sab_residual_2:w
        sab_residual_2:e -> sab_attention_mask:w
        sab_mask:e -> sab_attention_mask:w [label="\n(mask)"]
        sab_attention_mask:e -> sab_out:w
        sab_features:e -> sab_residual_1:w
        sab_residual_1:e -> sab_residual_2:w
    }

    subgraph cluster_input {
        label = "Input"

        node [style=filled]
        room_status [label="Room Status\n(6)"]
        team_status [label="Team Status\n(2x16)"]
        active_volatile [label="Active Volatile\n(2x1x68)"]
        pokemon_alive [label="Pokemon Alive\n(2x6)"]
        pokemon_basic [label="Pokemon Basic\n(2x6x11)"]
        pokemon_species [label="Pokemon Species\n(2x7x557)"]
        pokemon_types [label="Pokemon Types\n(2x7x17)"]
        pokemon_stats [label="Pokemon Stats\n(2x7x35)"]
        pokemon_ability [label="Pokemon Ability\n(2x7x123)"]
        pokemon_item [label="Pokemon Item\n(2x6x2x209)"]
        pokemon_moves [label="Pokemon Moves\n(2x7x4x472)"]
    }

    subgraph cluster_encoder {
        label = "Individual Encoders"

        room_status_dense [label = "Dense(64) + Leaky ReLU\n(64)"]
        team_status_dense [label = "Dense(64) + Leaky ReLU)\n(2x64)"]
        active_volatile_dense [label = "Dense(128) + Leaky ReLU\n(2x1x128)"]
        pokemon_basic_dense [label="Dense(128) + Leaky ReLU\n(2x6x128)"]
        pokemon_species_dense [label="Dense(128) + Leaky ReLU\n(2x7x128)"]
        pokemon_types_dense [label="Dense(128) + Leaky ReLU\n(2x7x128)"]
        pokemon_stats_dense [label="Dense(128) + Leaky ReLU\n(2x7x128)"]
        pokemon_ability_dense [label="Dense(128) + Leaky ReLU\n(2x7x128)"]
        pokemon_item_dense [label="Dense(128) + Leaky ReLU\n(2x6x2x128)"]
        pokemon_moves_dense [label="Dense(128) + Leaky ReLU\n(2x7x4x128)"]

        room_status:e -> room_status_dense:w
        team_status:e -> team_status_dense:w
        active_volatile:e -> active_volatile_dense:w
        pokemon_basic:e -> pokemon_basic_dense:w
        pokemon_species:e -> pokemon_species_dense:w
        pokemon_types:e -> pokemon_types_dense:w
        pokemon_stats:e -> pokemon_stats_dense:w
        pokemon_ability:e -> pokemon_ability_dense:w
        pokemon_item:e -> pokemon_item_dense:w
        pokemon_moves:e -> pokemon_moves_dense:w
    }

    subgraph cluster_move {
        label = "Move Features"

        pokemon_moves_attention [label="SAB(4,32,128)\n(2x7x4x128)"]
        pokemon_moves_aggregate [label="PMA(4,32,128)\n(2x7x128)"]

        pokemon_moves_dense:n -> pokemon_moves_attention:s
        pokemon_moves_attention:e -> pokemon_moves_aggregate:w

        pokemon_moves -> pokemon_moves_attention [style=invis]
    }

    subgraph cluster_split {
        label = "Active/Bench Split"

        active_and_pokemon_concat [label="Concat\n(2x7x640)"]
        active_and_pokemon_split [label="Split + Reshape\n(2x1x1280), (2x5x640)"]
        pokemon_concat [label="Reshape + Concat\n(2x6x384)"]
        pokemon_split [label="Split\n(2x1x384), (2x5x384)"]
        alive_split [label="Split\n(2x1), (2x5)"]

        pokemon_species_dense:e -> active_and_pokemon_concat:w
        pokemon_types_dense:e -> active_and_pokemon_concat:w
        pokemon_stats_dense:e -> active_and_pokemon_concat:w
        pokemon_ability_dense:e -> active_and_pokemon_concat:w
        pokemon_moves_aggregate:se -> active_and_pokemon_concat:w
        active_and_pokemon_concat:e -> active_and_pokemon_split:w
        pokemon_basic_dense:e -> pokemon_concat:w
        pokemon_item_dense:e -> pokemon_concat:w
        pokemon_concat:e -> pokemon_split:w
        pokemon_alive:e -> alive_split:w
    }

    subgraph cluster_active {
        label = "Active Features"

        active_concat [label="Concat\n(2x1x1792)"]
        active_dense [label="Dense(256) + Leaky ReLU\n(2x1x256)"]
        active_mask [label="Mask\n(2x1x256)"]
        active_flatten [label="Flatten\n(512)"]

        active_volatile_dense:e -> active_concat:w
        active_and_pokemon_split:se -> active_concat:w
        pokemon_split:se -> active_concat:w
        active_concat:e -> active_dense:w
        active_dense:e -> active_mask:w
        alive_split:e -> active_mask:w [label="(mask)"]
        active_mask:e -> active_flatten:w
    }

    subgraph cluster_bench {
        label = "Bench Features"

        bench_concat [label="Concat\n(2x5x1024)"]
        bench_dense [label="Dense(256) + Leaky ReLU\n(2x1x256)"]
        bench_mask [label="Mask\n(2x5x256)"]

        active_and_pokemon_split:e -> bench_concat:w
        pokemon_split:e ->  bench_concat:w
        bench_concat -> bench_dense -> bench_mask:w
        alive_split:e -> bench_mask:w [label="\n(mask)"]

        active_concat -> bench_concat [style=invis]
    }

    subgraph cluster_bench_aggregate {
        label = "Bench Aggregate"

        bench_attention [label="SAB(8,32,256)\n(2x5x256)"]
        bench_aggregate [label="PMA(8,32,256)\n(2x256)"]

        bench_mask:e -> bench_attention:w
        bench_attention:e -> bench_aggregate:w
        alive_split:e -> bench_attention:w [label="(mask)"]
    }

    subgraph cluster_global {
        label = "Global"

        global_concat [label="Flatten + Concat\n(1216)"]
        global_dense [label="Dense(256) + Leaky RelU\n(256)"]
        active_global_concat [label="Concat\n(768)"]

        room_status_dense:e ->  global_concat:w
        team_status_dense:e -> global_concat:w
        active_flatten:e -> global_concat:w
        bench_aggregate:e -> global_concat:w
        global_concat:e -> global_dense:w
        global_dense:e -> active_global_concat:w
        active_flatten:e -> active_global_concat:w [label="(residual)"]
    }

    subgraph cluster_action {
        label = "Action"

        subgraph cluster_action_move {
            label = "Move"

            action_move_slice [label="Slice + Reshape\n(4x128)"]
            action_move_concat [label="Concat\n(4x896)"]
            action_move_dense [label="Dense(256) + Leaky ReLU\n(4x256)"]

            pokemon_moves_attention:e -> action_move_slice:w
            action_move_slice:e -> action_move_concat:w
            active_global_concat:e -> action_move_concat:sw [label="(tiled x4)"]
            action_move_concat:e -> action_move_dense:w

            global_concat -> action_move_slice [style=invis]
        }

        subgraph cluster_action_switch {
            label = "Switch"

            action_switch_slice [label="Slice + Reshape\n(5x256)"]
            action_switch_concat [label="Concat\n(5x1024)"]
            action_switch_dense [label="Dense(256) + Leaky ReLU\n(5x256)"]

            bench_attention:e -> action_switch_slice:w
            action_switch_slice:e -> action_switch_concat:w
            active_global_concat:e -> action_switch_concat:sw [label="(tiled x5)"]
            action_switch_concat:e -> action_switch_dense:w

            active_global_concat -> action_switch_slice [style=invis]
        }
    }

    subgraph cluster_value {
        label = "State"

        value_dense [label="Dense(256) + Leaky ReLU\n(256)"]

        active_global_concat:e -> value_dense:w
    }

    subgraph cluster_dist {
        label = "Distributional (atoms = 51)"

        subgraph cluster_dist_action {
            label = "Action Advantage Dist"

            action_move_adv_logits [label="Dense(51)\n(4x51)"]
            action_switch_adv_logits [label="Dense(51)\n(5x51)"]
            adv_logits [label="Concat\n(9x51)"]

            action_move_dense:e -> action_move_adv_logits:w
            action_switch_dense:e -> action_switch_adv_logits:w
            action_move_adv_logits:e -> adv_logits:w
            action_switch_adv_logits:e -> adv_logits:w
        }

        subgraph cluster_dist_dueling {
            label = "Dueling"

            subgraph cluster_dist_value {
                label = "State Value Dist"

                v_logits [label="Dense(51) + Reshape\n(1x51)"]

                value_dense:e -> v_logits:w

                adv_logits -> v_logits [style=invis]
            }

            adv_centered_logits [label="Sub Mean\nOver Actions\n(9x51)"]
            q_logits [label="Add\n(9x51)"]
            q_dist_dueling [label="Softmax\n(9x51)"]
            dist_dueling_output [style=filled label="Action Dist\n(9x51)"]

            adv_logits:e -> adv_centered_logits:w
            adv_centered_logits:e -> q_logits:w
            v_logits:e -> q_logits:w
            q_logits:e -> q_dist_dueling:w
            q_dist_dueling:e -> dist_dueling_output:w
        }
    }
}
